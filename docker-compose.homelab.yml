version: '3.8'

services:
  # MCP Server - exposed for network access
  mcp-server:
    build: .
    ports:
      - "8080:8080"
      - "8443:8443"  # HTTPS
    environment:
      - MCP_HTTP_HOST=0.0.0.0
      - MCP_HTTP_PORT=8080
      - DATABASE_URL=postgresql://mcp:mcp_password@postgres:5432/mcp_db
      - MONGODB_URI=mongodb://mcp:mcp_password@mongodb:27017/mcp?authSource=admin
      - REDIS_URL=redis://redis:6379
      - PROMETHEUS_URL=http://prometheus:9090
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://jaeger:4317
      - RUST_LOG=devops_mcp=info,tower_http=debug
    depends_on:
      - postgres
      - mongodb
      - redis
    restart: unless-stopped
    volumes:
      - ./data/mcp:/app/data
    networks:
      - mcp-network

  # PostgreSQL for database module and memory persistence
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: mcp
      POSTGRES_PASSWORD: mcp_password
      POSTGRES_DB: mcp_db
    ports:
      - "5432:5432"  # Exposed for direct access if needed
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./data/postgres-backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # MongoDB for database module
  mongodb:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mcp
      MONGO_INITDB_ROOT_PASSWORD: mcp_password
      MONGO_INITDB_DATABASE: mcp
    volumes:
      - mongo_data:/data/db
      - ./data/mongo-backups:/backups
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./data/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://YOUR_UBUNTU_IP:9090'
    restart: unless-stopped
    networks:
      - mcp-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://YOUR_UBUNTU_IP:3000
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - mcp-network

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
      - COLLECTOR_OTLP_ENABLED=true
      - QUERY_BASE_PATH=/jaeger
    restart: unless-stopped
    networks:
      - mcp-network

  # Reverse proxy for external access
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=your-email@example.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8081:8080"  # Traefik dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/letsencrypt:/letsencrypt"
    restart: unless-stopped
    networks:
      - mcp-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.YOUR_DOMAIN`)"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

volumes:
  postgres_data:
  mongo_data:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16